package com.example.builder;

/**
 *
   Builder模式
    Builder模式是一步一步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，可以更精细地控制对象的构建流程。
    该模式是为了将构建复杂对象的过程和它的部件解耦，使得构建过程和部件完全隔离开来。
    因为一个复杂的对象有很多的组件部分，如汽车，有车轮，方向盘，发动机，还有各种小零件，如何将这些部件装配成一辆汽车，这个装配过程很漫长，也很复杂。
    对于这种情况，为了构建过程中对外隐藏实现细节，就可以使用Builder模式将部件和组装过程分离，使得构建过程和部件都可以自由扩展，两者之间的耦合也降到了最低。

  定义：
    将一个复杂对象的构建和它的表示分离，使得同样的构建过程可以创建不同的表示。

   使用场景:
    1.相同的方法，不同的执行顺序，产生不同的事件结果时。
    2.多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同
    3.产品类非常复杂，或者产品类中的调用顺序不同产生了不同的作用。
    4.当初始化一个对象特别复杂，如参数多，且参数都有默认值时。

    优点：
    1.良好的封装性，使用构造者模式可以使客户端不必知道产品构建的细节
    2.构建者独立，容易扩展

    缺点：
    会产生多余的Builder对象以及Director对象，消耗内存

 */
public class Definition {


}
